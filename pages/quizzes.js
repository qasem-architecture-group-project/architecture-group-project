import Head from "next/head";
import Navigation from "@/components/navigation";
import React, { useState, useEffect } from "react";
import QuizView from "@/components/quizView";
import ScoreView from "@/components/scoreView";
import questions from "@/constants/quiz_content";
import IncorrectQuestionsView from "@/components/incorrectQuestionView";

export default function Quizzes() {
  const [animalInput, setAnimalInput] = useState("");
  const [result, setResult] = useState();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [isQuizOver, setIsQuizOver] = useState(false);
  const [viewIncorrectQuestions, setViewIncorrectQuestions] = useState(false);
  const [score, setScore] = useState(0);
  const [incorrectQuestions, setIncorrectQuestions] = useState([]);

  async function onSubmit(event) {
    event.preventDefault();
    try {
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ animal: animalInput }),
      });

      const data = await response.json();
      if (response.status !== 200) {
        throw (
          data.error ||
          new Error(`Request failed with status ${response.status}`)
        );
      }

      setResult(data.result);
      setAnimalInput("");
    } catch (error) {
      // Consider implementing your own error handling logic here
      console.error(error);
      alert(error.message);
    }
  }

  const handleAnswerClick = (isCorrect) => {
    // check score
    if (isCorrect) {
      setScore(score + 1);
    } else {
      setIncorrectQuestions([
        ...incorrectQuestions,
        questions[currentQuestion],
      ]);
    }

    const next = currentQuestion + 1;
    if (next < questions.length) {
      setCurrentQuestion(next);
    } else {
      setIsQuizOver(true);
    }
  };
  // Perform string conversions here
  const incorrectQuestionsText = incorrectQuestions.map((q) => q.question);
  const incorrectQuestionsString = incorrectQuestionsText.join(" | ");

  // Now you can use the `incorrectQuestionsString` for the API call or any other purpose
  console.log(incorrectQuestionsString);

  const handleResetClick = () => {
    // fix: score not resetting
    setScore(0);
    setIncorrectQuestions([]);
    setCurrentQuestion(0);
    setIsQuizOver(false);
  };

  return (
    <>
      <Head>
        <title>Quizzes - Computer Architecture Project</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="bg-medium bg-fixed bg-center bg-cover min-h-screen">
          <Navigation />
          <div className="h-40"></div>
          <h3>Name my pet</h3>
          <form onSubmit={onSubmit}>
            <input
              type="text"
              name="animal"
              placeholder="Enter an animal"
              value={animalInput}
              onChange={(e) => setAnimalInput(e.target.value)}
            />
            <input type="submit" value="Generate names" />
          </form>
          <div>{result}</div>
          <div className="h-12"></div>
          <div className="flex justify-center">
            {viewIncorrectQuestions ? (
              <IncorrectQuestionsView incorrectQuestions={incorrectQuestions} />
            ) : isQuizOver ? (
              <ScoreView
                handleResetClick={handleResetClick}
                score={score}
                setViewIncorrectQuestions={setViewIncorrectQuestions}
              />
            ) : (
              <QuizView
                questions={questions}
                currentQuestion={currentQuestion}
                handleAnswerClick={handleAnswerClick}
              />
            )}
          </div>
        </div>
      </main>
    </>
  );
}
